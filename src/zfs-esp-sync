#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [[ ! -f /etc/zfs-esp-sync ]]; then
    echo "/etc/zfs-esp-sync does not exists, skipping"
    exit 1
fi

readonly target=${1:?"usage: $0 <target>"}

. /etc/zfs-esp-sync

#
# Default boot target to be started by the root <esp>/startup.nsh
# file.
#
# The files will be searched are:
#   - /boot/vmlinuz-${default}
#   - /boot/initramfs-${default}.img
#   - /boot/initramfs-${default}-fallback.img
#
# readonly default=linux
readonly default=${default:?"default boot target undefined"}

#
# Where is the ESP? One of the 'FS' entries return by the 'map'
# command ran inside an UEFI shell. Usuall fs0
#
# readonly esp_fs=fs0
readonly esp_fs=${esp_fs:?"esp_fs undefined"}

#
# Where the ESP is mounted.
#
# readonly esp_mount="/boot/efi"
readonly esp_mount=${esp_mount:?"esp_mount undefined"}

#
# The target directory to copy the files to.
#
readonly target_dir="${esp_mount}/EFI/arch"

#
# Like target_dir but viewed from inside the ESP root,
# and ESP uses '\' instead of '/' to separate the path names.
# This will be placed inside the *.nsh scripts to reference the copied files.
#
readonly target_dir_on_esp="\\EFI\\arch"

#
# If the intel-ucode package is installed,
# it will be placed in the initrd kernel parameter.
#
readonly intel_ucode_name="intel-ucode.img"
readonly intel_ucode_path="/boot/${intel_ucode_name}"

gen_nsh() {
    local vmlinuz="$1"
    local initramfs="$2"
    local nsh="${target_dir}/$3"
    local initrd="initrd=${target_dir_on_esp}\\${initramfs}"

    if [[ -e "${intel_ucode_path}" ]]; then
	initrd="initrd=${target_dir_on_esp}\\intel-ucode.img ${initrd}"
    fi

    echo "-> ${nsh}"
    echo "# Generated by $0" > "${nsh}"
    echo "$esp_fs:" >> "${nsh}"
    echo "${target_dir_on_esp}\\${vmlinuz}.efi zfs=bootfs rw ${initrd}" >> "${nsh}"
}

process() {

    local vmlinuz="vmlinuz-${target}"

    local initramfs="initramfs-${target}.img"
    local initramfs_fallback="initramfs-${target}-fallback.img"

    local startnsh="start-${target}.nsh"
    local startnsh_fallback="start-${target}-fallback.nsh"

    if [[ -e "/boot/${vmlinuz}" ]] \
           && [[ -e "/boot/${initramfs}" ]] \
           && [[ -e "/boot/${initramfs_fallback}" ]]; then

        echo "/boot/${vmlinuz} exists, copying its files..."

        cp -afv \
	   "/boot/${vmlinuz}" \
	   "/boot/${initramfs}" \
	   "/boot/${initramfs_fallback}" \
	   "${target_dir}"

        mv -v "${target_dir}/${vmlinuz}" "${target_dir}/${vmlinuz}.efi"

	gen_nsh "${vmlinuz}" "${initramfs}"          "${startnsh}"
	gen_nsh "${vmlinuz}" "${initramfs_fallback}" "${startnsh_fallback}"

        if [[ "${target}" == "${default}" ]]; then
            echo "Making ${target} the default boot target..."
            echo "-> ${esp_mount}/startup.nsh"
            echo "$esp_fs:" > "${esp_mount}/startup.nsh"
            echo "${target_dir_on_esp}\\${startnsh}" >> "${esp_mount}/startup.nsh"
        fi

    elif [[ ! -e "/boot/${vmlinuz}" ]]; then
	echo "/boot/${vmlinuz} does not exist, removing its files..."
	rm -fv \
	   "${target_dir}/${vmlinuz}.efi" \
	   "${target_dir}/${initramfs}" \
	   "${target_dir}/${initramfs_fallback}" \
	   "${target_dir}/${startnsh}" \
	   "${target_dir}/${startnsh_fallback}"

    else
        echo "Not all files present, still being generated?"
    fi
}

process_intel_ucode() {
    if [[ -e "${intel_ucode_path}" ]]; then
	cp -afv "${intel_ucode_path}" "${target_dir}"
    else
	echo "${intel_ucode_path} does not exist, removing its files..."
	rm -fv "${target_dir}/${intel_ucode_name}"
    fi
}

mkdir -p "${target_dir}"
process_intel_ucode
process
